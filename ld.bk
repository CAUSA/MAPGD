/*This code was automatically generated by extras/automatic_src/make_tangent_ld.py*/

#include "population.h"
#include "typedef.h"

inline float_t H0 (const Population &P1, const Population &P2, const float_t &D) {
	float_t sum=0;
	float_t Q1=P1.m;
	float_t Q2=P2.m;
	float_t f=(P1.f+P2.f)/2.;
	int p_size=P1.likelihoods.size();
	for (int x=0; x<p_size; ++x) {
		float_t MM1=P1.likelihoods[x].MM;
		float_t Mm1=P1.likelihoods[x].Mm;
		float_t mm1=P1.likelihoods[x].mm;
		float_t MM2=P2.likelihoods[x].MM;
		float_t Mm2=P2.likelihoods[x].Mm;
		float_t mm2=P2.likelihoods[x].mm;
		if (P1.likelihoods[x].N > 0 and P2.likelihoods[x].N > 0){
		sum+=(MM1*MM2*(2*D - f*(D + (-Q1 + 1.0)*(-Q2 + 1.0)) + f*(-D - (-Q1 + 1.0)*(-Q2 + 1.0) + 1) + 2*(-Q1 + 1.0)*(-Q2 + 1.0)) + MM1*Mm2*(-2*D + 2*Q2*(-Q1 + 1.0))*(-f + 1) - 2*MM1*Mm2*(D + (-Q1 + 1.0)*(-Q2 + 1.0))*(-f + 1) + MM1*mm2*(2*D - 2*Q2*(-Q1 + 1.0) + f*(-D + Q2*(-Q1 + 1.0)) - f*(D - Q2*(-Q1 + 1.0) + 1)) + 2*MM2*Mm1*(-D + Q1*(-Q2 + 1.0))*(-f + 1) - MM2*Mm1*(2*D + 2*(-Q1 + 1.0)*(-Q2 + 1.0))*(-f + 1) + MM2*mm1*(2*D - 2*Q1*(-Q2 + 1.0) + f*(-D + Q1*(-Q2 + 1.0)) - f*(D - Q1*(-Q2 + 1.0) + 1)) + Mm1*Mm2*(-f + 1)*(8*D + 2*Q1*Q2 - 2*Q1*(-Q2 + 1.0) - 2*Q2*(-Q1 + 1.0) + 2*(-Q1 + 1.0)*(-Q2 + 1.0)) + Mm1*mm2*(-2*D + 2*Q2*(-Q1 + 1.0))*(-f + 1) - 2*Mm1*mm2*(D + Q1*Q2)*(-f + 1) + Mm2*mm1*(-2*D + 2*Q1*(-Q2 + 1.0))*(-f + 1) - 2*Mm2*mm1*(D + Q1*Q2)*(-f + 1) + mm1*mm2*(2*D + 2*Q1*Q2 - f*(D + Q1*Q2) + f*(-D - Q1*Q2 + 1)))/(MM1*MM2*(f*(D + (-Q1 + 1.0)*(-Q2 + 1.0))*(-D - (-Q1 + 1.0)*(-Q2 + 1.0) + 1) + pow(D + (-Q1 + 1.0)*(-Q2 + 1.0), 2)) + MM1*Mm2*(-2*D + 2*Q2*(-Q1 + 1.0))*(D + (-Q1 + 1.0)*(-Q2 + 1.0))*(-f + 1) + MM1*mm2*(f*(-D + Q2*(-Q1 + 1.0))*(D - Q2*(-Q1 + 1.0) + 1) + pow(-D + Q2*(-Q1 + 1.0), 2)) + MM2*Mm1*(-D + Q1*(-Q2 + 1.0))*(2*D + 2*(-Q1 + 1.0)*(-Q2 + 1.0))*(-f + 1) + MM2*mm1*(f*(-D + Q1*(-Q2 + 1.0))*(D - Q1*(-Q2 + 1.0) + 1) + pow(-D + Q1*(-Q2 + 1.0), 2)) + Mm1*Mm2*(-f + 1)*((-2*D + 2*Q1*(-Q2 + 1.0))*(-D + Q2*(-Q1 + 1.0)) + (D + Q1*Q2)*(2*D + 2*(-Q1 + 1.0)*(-Q2 + 1.0))) + Mm1*mm2*(-2*D + 2*Q2*(-Q1 + 1.0))*(D + Q1*Q2)*(-f + 1) + Mm2*mm1*(-2*D + 2*Q1*(-Q2 + 1.0))*(D + Q1*Q2)*(-f + 1) + mm1*mm2*(f*(D + Q1*Q2)*(-D - Q1*Q2 + 1) + pow(D + Q1*Q2, 2)))
	;}
	}
	return sum;
}

inline float_t J00 (const Population &P1, const Population &P2, const float_t &D) {
	float_t sum=0;
	float_t Q1=P1.m;
	float_t Q2=P2.m;
	float_t f=(P1.f+P2.f)/2.;
	int p_size=P1.likelihoods.size();
	for (int x=0; x<p_size; ++x) {
		float_t MM1=P1.likelihoods[x].MM;
		float_t Mm1=P1.likelihoods[x].Mm;
		float_t mm1=P1.likelihoods[x].mm;
		float_t MM2=P2.likelihoods[x].MM;
		float_t Mm2=P2.likelihoods[x].Mm;
		float_t mm2=P2.likelihoods[x].mm;
		if (P1.likelihoods[x].N > 0 and P2.likelihoods[x].N > 0){
		sum+=(MM1*MM2*(-2*f + 2) - 4*MM1*Mm2*(-f + 1) + MM1*mm2*(-2*f + 2) - 4*MM2*Mm1*(-f + 1) + MM2*mm1*(-2*f + 2) + 8*Mm1*Mm2*(-f + 1) - 4*Mm1*mm2*(-f + 1) - 4*Mm2*mm1*(-f + 1) + mm1*mm2*(-2*f + 2))/(MM1*MM2*(f*(D + (-Q1 + 1.0)*(-Q2 + 1.0))*(-D - (-Q1 + 1.0)*(-Q2 + 1.0) + 1) + pow(D + (-Q1 + 1.0)*(-Q2 + 1.0), 2)) + MM1*Mm2*(-2*D + 2*Q2*(-Q1 + 1.0))*(D + (-Q1 + 1.0)*(-Q2 + 1.0))*(-f + 1) + MM1*mm2*(f*(-D + Q2*(-Q1 + 1.0))*(D - Q2*(-Q1 + 1.0) + 1) + pow(-D + Q2*(-Q1 + 1.0), 2)) + MM2*Mm1*(-D + Q1*(-Q2 + 1.0))*(2*D + 2*(-Q1 + 1.0)*(-Q2 + 1.0))*(-f + 1) + MM2*mm1*(f*(-D + Q1*(-Q2 + 1.0))*(D - Q1*(-Q2 + 1.0) + 1) + pow(-D + Q1*(-Q2 + 1.0), 2)) + Mm1*Mm2*(-f + 1)*((-2*D + 2*Q1*(-Q2 + 1.0))*(-D + Q2*(-Q1 + 1.0)) + (D + Q1*Q2)*(2*D + 2*(-Q1 + 1.0)*(-Q2 + 1.0))) + Mm1*mm2*(-2*D + 2*Q2*(-Q1 + 1.0))*(D + Q1*Q2)*(-f + 1) + Mm2*mm1*(-2*D + 2*Q1*(-Q2 + 1.0))*(D + Q1*Q2)*(-f + 1) + mm1*mm2*(f*(D + Q1*Q2)*(-D - Q1*Q2 + 1) + pow(D + Q1*Q2, 2))) + (-MM1*MM2*(2*D - f*(D + (-Q1 + 1.0)*(-Q2 + 1.0)) + f*(-D - (-Q1 + 1.0)*(-Q2 + 1.0) + 1) + 2*(-Q1 + 1.0)*(-Q2 + 1.0)) - MM1*Mm2*(-2*D + 2*Q2*(-Q1 + 1.0))*(-f + 1) + 2*MM1*Mm2*(D + (-Q1 + 1.0)*(-Q2 + 1.0))*(-f + 1) - MM1*mm2*(2*D - 2*Q2*(-Q1 + 1.0) + f*(-D + Q2*(-Q1 + 1.0)) - f*(D - Q2*(-Q1 + 1.0) + 1)) - 2*MM2*Mm1*(-D + Q1*(-Q2 + 1.0))*(-f + 1) + MM2*Mm1*(2*D + 2*(-Q1 + 1.0)*(-Q2 + 1.0))*(-f + 1) - MM2*mm1*(2*D - 2*Q1*(-Q2 + 1.0) + f*(-D + Q1*(-Q2 + 1.0)) - f*(D - Q1*(-Q2 + 1.0) + 1)) - Mm1*Mm2*(-f + 1)*(8*D + 2*Q1*Q2 - 2*Q1*(-Q2 + 1.0) - 2*Q2*(-Q1 + 1.0) + 2*(-Q1 + 1.0)*(-Q2 + 1.0)) - Mm1*mm2*(-2*D + 2*Q2*(-Q1 + 1.0))*(-f + 1) + 2*Mm1*mm2*(D + Q1*Q2)*(-f + 1) - Mm2*mm1*(-2*D + 2*Q1*(-Q2 + 1.0))*(-f + 1) + 2*Mm2*mm1*(D + Q1*Q2)*(-f + 1) - mm1*mm2*(2*D + 2*Q1*Q2 - f*(D + Q1*Q2) + f*(-D - Q1*Q2 + 1)))*(MM1*MM2*(2*D - f*(D + (-Q1 + 1.0)*(-Q2 + 1.0)) + f*(-D - (-Q1 + 1.0)*(-Q2 + 1.0) + 1) + 2*(-Q1 + 1.0)*(-Q2 + 1.0)) + MM1*Mm2*(-2*D + 2*Q2*(-Q1 + 1.0))*(-f + 1) - 2*MM1*Mm2*(D + (-Q1 + 1.0)*(-Q2 + 1.0))*(-f + 1) + MM1*mm2*(2*D - 2*Q2*(-Q1 + 1.0) + f*(-D + Q2*(-Q1 + 1.0)) - f*(D - Q2*(-Q1 + 1.0) + 1)) + 2*MM2*Mm1*(-D + Q1*(-Q2 + 1.0))*(-f + 1) - MM2*Mm1*(2*D + 2*(-Q1 + 1.0)*(-Q2 + 1.0))*(-f + 1) + MM2*mm1*(2*D - 2*Q1*(-Q2 + 1.0) + f*(-D + Q1*(-Q2 + 1.0)) - f*(D - Q1*(-Q2 + 1.0) + 1)) + Mm1*Mm2*(-f + 1)*(8*D + 2*Q1*Q2 - 2*Q1*(-Q2 + 1.0) - 2*Q2*(-Q1 + 1.0) + 2*(-Q1 + 1.0)*(-Q2 + 1.0)) + Mm1*mm2*(-2*D + 2*Q2*(-Q1 + 1.0))*(-f + 1) - 2*Mm1*mm2*(D + Q1*Q2)*(-f + 1) + Mm2*mm1*(-2*D + 2*Q1*(-Q2 + 1.0))*(-f + 1) - 2*Mm2*mm1*(D + Q1*Q2)*(-f + 1) + mm1*mm2*(2*D + 2*Q1*Q2 - f*(D + Q1*Q2) + f*(-D - Q1*Q2 + 1)))/pow(MM1*MM2*(f*(D + (-Q1 + 1.0)*(-Q2 + 1.0))*(-D - (-Q1 + 1.0)*(-Q2 + 1.0) + 1) + pow(D + (-Q1 + 1.0)*(-Q2 + 1.0), 2)) + MM1*Mm2*(-2*D + 2*Q2*(-Q1 + 1.0))*(D + (-Q1 + 1.0)*(-Q2 + 1.0))*(-f + 1) + MM1*mm2*(f*(-D + Q2*(-Q1 + 1.0))*(D - Q2*(-Q1 + 1.0) + 1) + pow(-D + Q2*(-Q1 + 1.0), 2)) + MM2*Mm1*(-D + Q1*(-Q2 + 1.0))*(2*D + 2*(-Q1 + 1.0)*(-Q2 + 1.0))*(-f + 1) + MM2*mm1*(f*(-D + Q1*(-Q2 + 1.0))*(D - Q1*(-Q2 + 1.0) + 1) + pow(-D + Q1*(-Q2 + 1.0), 2)) + Mm1*Mm2*(-f + 1)*((-2*D + 2*Q1*(-Q2 + 1.0))*(-D + Q2*(-Q1 + 1.0)) + (D + Q1*Q2)*(2*D + 2*(-Q1 + 1.0)*(-Q2 + 1.0))) + Mm1*mm2*(-2*D + 2*Q2*(-Q1 + 1.0))*(D + Q1*Q2)*(-f + 1) + Mm2*mm1*(-2*D + 2*Q1*(-Q2 + 1.0))*(D + Q1*Q2)*(-f + 1) + mm1*mm2*(f*(D + Q1*Q2)*(-D - Q1*Q2 + 1) + pow(D + Q1*Q2, 2)), 2)
	;}
	}
	return sum;
}

inline float_t lnL_NR (const Population &P1, const Population &P2, const float_t &D) {
	float_t sum=0;
	float_t Q1=P1.m;
	float_t Q2=P2.m;
	float_t f=(P1.f+P2.f)/2.;
//	std::cerr << P1.f << std::endl;
	int p_size=P1.likelihoods.size();
	for (int x=0; x<p_size; ++x) {
		float_t MM1=P1.likelihoods[x].MM;
		float_t Mm1=P1.likelihoods[x].Mm;
		float_t mm1=P1.likelihoods[x].mm;
		float_t MM2=P2.likelihoods[x].MM;
		float_t Mm2=P2.likelihoods[x].Mm;
		float_t mm2=P2.likelihoods[x].mm;
		if (P1.likelihoods[x].N > 0 and P2.likelihoods[x].N > 0){
		sum+=log(MM1*MM2*(D + (Q1 - 1.0)*(Q2 - 1.0))*(D - f*(D + (Q1 - 1.0)*(Q2 - 1.0) - 1) + (Q1 - 1.0)*(Q2 - 1.0)) + 2*MM1*Mm2*(D + Q2*(Q1 - 1.0))*(D + (Q1 - 1.0)*(Q2 - 1.0))*(f - 1) + MM1*mm2*(D + Q2*(Q1 - 1.0))*(D + Q2*(Q1 - 1.0) - f*(D + Q2*(Q1 - 1.0) + 1)) + 2*MM2*Mm1*(D + Q1*(Q2 - 1.0))*(D + (Q1 - 1.0)*(Q2 - 1.0))*(f - 1) + MM2*mm1*(D + Q1*(Q2 - 1.0))*(D + Q1*(Q2 - 1.0) - f*(D + Q1*(Q2 - 1.0) + 1)) - 2*Mm1*Mm2*(f - 1)*((D + Q1*Q2)*(D + (Q1 - 1.0)*(Q2 - 1.0)) + (D + Q1*(Q2 - 1.0))*(D + Q2*(Q1 - 1.0))) + 2*Mm1*mm2*(D + Q1*Q2)*(D + Q2*(Q1 - 1.0))*(f - 1) + 2*Mm2*mm1*(D + Q1*Q2)*(D + Q1*(Q2 - 1.0))*(f - 1) + mm1*mm2*(D + Q1*Q2)*(D + Q1*Q2 - f*(D + Q1*Q2 - 1)))
	;}
	}
	return sum;
}

