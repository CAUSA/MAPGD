import sympy 
import sys
from sympy.utilities.codegen import codegen
from sympy.printing import print_ccode

#The Data
X0=sympy.Symbol("X0")
X1=sympy.Symbol("X1")
X2=sympy.Symbol("X2")
Y0=sympy.Symbol("Y0")
Y1=sympy.Symbol("Y1")
Y2=sympy.Symbol("Y2")

e=sympy.Symbol("e")
G0=sympy.Symbol("G0")
G1=sympy.Symbol("G1")
G2=sympy.Symbol("G2")

#The Parameters

#An array of the parameters.
params=[fX, fY, r, SXY, SYX, d, D]

#The three componenents of the likelihood function. H00 is homozygous for the major allele, H01 heterozygous, and H11 homozygous minor.
X0Y0=( G0*G0+fX ) 
X1Y0=( G1*G0-fX ) 
X2Y0=( G2*G0+ex ) 
X0Y1=( G0*G1+ ) 
X1Y1=( G1*G1+ ) 
X2Y1=( G2*G1+ ) 
X0Y2=( G0*G2+ ) 
X1Y2=( G1*G2+ ) 
X2Y2=( G2*G2+ ) 


#The log likelihood equation
lnL=sympy.log( H00+H01+H11 )

system_eq=[]

#We first need the three equations we are going to try and set to zero, i.e. the first partial derivitives wrt e h and F.
print "/*This code was automatically generated by "+str(sys.argv[0])+"*/\n"
print "#include \"allele_stat.h\""
print "#include \"quartet.h\""
print "#include \"typedef.h\""
print 
for x in range(0, 3):
	system_eq.append(sympy.diff(lnL, params[x]) )
	print "inline float_t H"+str(x)+" (const quartet_t &q, const allele_stat &a) {"
	print "\tconst float_t M=q.base[a.major];"
	print "\tconst float_t m=q.base[a.minor];"
	print "\tconst float_t e1=q.base[a.e1];"
	print "\tconst float_t e2=q.base[a.e2];"
	sys.stdout.write("\treturn ")
	print_ccode(  system_eq[-1] )
	print ";\n}\n"

#Then we need to make the Jacobian, which is a matrix with ...
for x in range(0, 3):
	for y in range(0, 3):
		print "inline float_t J"+str(x)+str(y)+" (const quartet_t &q, const allele_stat &a) {"
		print "\tconst float_t M=q.base[a.major];"
		print "\tconst float_t m=q.base[a.minor];"
		print "\tconst float_t e1=q.base[a.e1];"
		print "\tconst float_t e2=q.base[a.e2];"
		sys.stdout.write("\treturn ")
		print_ccode(sympy.diff(system_eq[x], params[y]) )
		print ";\n}\n"
print "inline float_t lnL (const quartet_t &q, const allele_stat &a) {"
print "\tconst float_t M=q.base[a.major];"
print "\tconst float_t m=q.base[a.minor];"
print "\tconst float_t e1=q.base[a.e1];"
print "\tconst float_t e2=q.base[a.e2];"
sys.stdout.write("\treturn ")
print_ccode(lnL)
print ";\n}\n"


quit()

