/*This code was automatically generated by extras/automatic_src/make_tangent_ld.py*/

#ifndef NEWTON_LD
#define NEWTON_LD

#include "population.h"
#include "typedef.h"
#include "constants.h"


float_t H0 (const Population &P1, const Population &P2, const float_t &D); 

float_t J00 (const Population &P1, const Population &P2, const float_t &D); 

inline float_t lnL_NR (const Population &P1, const Population &P2, const float_t &D) {
	float_t sum=0;
	float_t Q1=P1.m;
	float_t Q2=P2.m;
	float_t f=(P1.f+P2.f)/2.;
	int p_size=P1.likelihoods.size();
	for (int x=0; x<p_size; ++x) {
		float_t MM1=P1.likelihoods[x].MM;
		float_t Mm1=P1.likelihoods[x].Mm;
		float_t mm1=P1.likelihoods[x].mm;
		float_t MM2=P2.likelihoods[x].MM;
		float_t Mm2=P2.likelihoods[x].Mm;
		float_t mm2=P2.likelihoods[x].mm;
		if (P1.likelihoods[x].N > 0 and P2.likelihoods[x].N > 0){
		sum+=log(MM1*MM2*(D + (Q1 - 1.0)*(Q2 - 1.0))*(D - f*(D + (Q1 - 1.0)*(Q2 - 1.0) - 1) + (Q1 - 1.0)*(Q2 - 1.0)) + 2*MM1*Mm2*(D + Q2*(Q1 - 1.0))*(D + (Q1 - 1.0)*(Q2 - 1.0))*(f - 1) + MM1*mm2*(D + Q2*(Q1 - 1.0))*(D + Q2*(Q1 - 1.0) - f*(D + Q2*(Q1 - 1.0) + 1)) + 2*MM2*Mm1*(D + Q1*(Q2 - 1.0))*(D + (Q1 - 1.0)*(Q2 - 1.0))*(f - 1) + MM2*mm1*(D + Q1*(Q2 - 1.0))*(D + Q1*(Q2 - 1.0) - f*(D + Q1*(Q2 - 1.0) + 1)) - 2*Mm1*Mm2*(f - 1)*((D + Q1*Q2)*(D + (Q1 - 1.0)*(Q2 - 1.0)) + (D + Q1*(Q2 - 1.0))*(D + Q2*(Q1 - 1.0))) + 2*Mm1*mm2*(D + Q1*Q2)*(D + Q2*(Q1 - 1.0))*(f - 1) + 2*Mm2*mm1*(D + Q1*Q2)*(D + Q1*(Q2 - 1.0))*(f - 1) + mm1*mm2*(D + Q1*Q2)*(D + Q1*Q2 - f*(D + Q1*Q2 - 1)))
	;}
	}
	return sum;
}

inline void set_c27 (Constants<float, std::tuple<const Population &, const Population &, const float_t &> > &con, const std::tuple<const Population &, const Population &, const float_t &> &d) {
	const float_t Q1=std::get<0>(d).m;
	const float_t Q2=std::get<1>(d).m;
	const float_t f=(std::get<0>(d).f+std::get<1>(d).f)/2.;
	const float_t D=std::get<2>(d);
	con.c[27]= -2*D + 2*Q1*(-Q2 + 1.0) ;
}

inline void set_c26 (Constants<float, std::tuple<const Population &, const Population &, const float_t &> > &con, const std::tuple<const Population &, const Population &, const float_t &> &d) {
	const float_t Q1=std::get<0>(d).m;
	const float_t Q2=std::get<1>(d).m;
	const float_t f=(std::get<0>(d).f+std::get<1>(d).f)/2.;
	const float_t D=std::get<2>(d);
	con.c[26]= 2*D + 2*(-Q1 + 1.0)*(-Q2 + 1.0) ;
}

inline void set_c25 (Constants<float, std::tuple<const Population &, const Population &, const float_t &> > &con, const std::tuple<const Population &, const Population &, const float_t &> &d) {
	const float_t Q1=std::get<0>(d).m;
	const float_t Q2=std::get<1>(d).m;
	const float_t f=(std::get<0>(d).f+std::get<1>(d).f)/2.;
	const float_t D=std::get<2>(d);
	con.c[25]= -D + Q1*(-Q2 + 1.0) ;
}

inline void set_c23 (Constants<float, std::tuple<const Population &, const Population &, const float_t &> > &con, const std::tuple<const Population &, const Population &, const float_t &> &d) {
	const float_t Q1=std::get<0>(d).m;
	const float_t Q2=std::get<1>(d).m;
	const float_t f=(std::get<0>(d).f+std::get<1>(d).f)/2.;
	const float_t D=std::get<2>(d);
	con.c[23]= D + (-Q1 + 1.0)*(-Q2 + 1.0) ;
}

inline void set_c11 (Constants<float, std::tuple<const Population &, const Population &, const float_t &> > &con, const std::tuple<const Population &, const Population &, const float_t &> &d) {
	const float_t Q1=std::get<0>(d).m;
	const float_t Q2=std::get<1>(d).m;
	const float_t f=(std::get<0>(d).f+std::get<1>(d).f)/2.;
	const float_t D=std::get<2>(d);
	con.c[11]= D + Q1*(Q2 - 1.0) ;
}

inline void set_c10 (Constants<float, std::tuple<const Population &, const Population &, const float_t &> > &con, const std::tuple<const Population &, const Population &, const float_t &> &d) {
	const float_t Q1=std::get<0>(d).m;
	const float_t Q2=std::get<1>(d).m;
	const float_t f=(std::get<0>(d).f+std::get<1>(d).f)/2.;
	const float_t D=std::get<2>(d);
	con.c[10]= D + Q2*(Q1 - 1.0) ;
}

inline void set_c6 (Constants<float, std::tuple<const Population &, const Population &, const float_t &> > &con, const std::tuple<const Population &, const Population &, const float_t &> &d) {
	const float_t Q1=std::get<0>(d).m;
	const float_t Q2=std::get<1>(d).m;
	const float_t f=(std::get<0>(d).f+std::get<1>(d).f)/2.;
	const float_t D=std::get<2>(d);
	con.c[6]= D + Q1*Q2 ;
}

inline void set_c0 (Constants<float, std::tuple<const Population &, const Population &, const float_t &> > &con, const std::tuple<const Population &, const Population &, const float_t &> &d) {
	const float_t Q1=std::get<0>(d).m;
	const float_t Q2=std::get<1>(d).m;
	const float_t f=(std::get<0>(d).f+std::get<1>(d).f)/2.;
	const float_t D=std::get<2>(d);
	con.c[0]= D + (Q1 - 1.0)*(Q2 - 1.0) ;
}

inline void set_c33 (Constants<float, std::tuple<const Population &, const Population &, const float_t &> > &con, const std::tuple<const Population &, const Population &, const float_t &> &d) {
	const float_t Q1=std::get<0>(d).m;
	const float_t Q2=std::get<1>(d).m;
	const float_t f=(std::get<0>(d).f+std::get<1>(d).f)/2.;
	const float_t D=std::get<2>(d);
	con.c[33]= 8*D + 2*Q1*Q2 - 2*Q1*(-Q2 + 1.0) - 2*Q2*(-Q1 + 1.0) + 2*(-Q1 + 1.0)*(-Q2 + 1.0) ;
}

inline void set_c32 (Constants<float, std::tuple<const Population &, const Population &, const float_t &> > &con, const std::tuple<const Population &, const Population &, const float_t &> &d) {
	const float_t Q1=std::get<0>(d).m;
	const float_t Q2=std::get<1>(d).m;
	const float_t f=(std::get<0>(d).f+std::get<1>(d).f)/2.;
	const float_t D=std::get<2>(d);
	con.c[32]= 2*D + 2*Q1*Q2 - con.c[6]*f + f*(-D - Q1*Q2 + 1) ;
}

inline void set_c31 (Constants<float, std::tuple<const Population &, const Population &, const float_t &> > &con, const std::tuple<const Population &, const Population &, const float_t &> &d) {
	const float_t Q1=std::get<0>(d).m;
	const float_t Q2=std::get<1>(d).m;
	const float_t f=(std::get<0>(d).f+std::get<1>(d).f)/2.;
	const float_t D=std::get<2>(d);
	con.c[31]= 2*D - 2*Q1*(-Q2 + 1.0) + con.c[25]*f - f*(D - Q1*(-Q2 + 1.0) + 1) ;
}

inline void set_c30 (Constants<float, std::tuple<const Population &, const Population &, const float_t &> > &con, const std::tuple<const Population &, const Population &, const float_t &> &d) {
	const float_t Q1=std::get<0>(d).m;
	const float_t Q2=std::get<1>(d).m;
	const float_t f=(std::get<0>(d).f+std::get<1>(d).f)/2.;
	const float_t D=std::get<2>(d);
	con.c[30]= 2*D - 2*Q2*(-Q1 + 1.0) + f*(-D + Q2*(-Q1 + 1.0)) - f*(D - Q2*(-Q1 + 1.0) + 1) ;
}

inline void set_c29 (Constants<float, std::tuple<const Population &, const Population &, const float_t &> > &con, const std::tuple<const Population &, const Population &, const float_t &> &d) {
	const float_t Q1=std::get<0>(d).m;
	const float_t Q2=std::get<1>(d).m;
	const float_t f=(std::get<0>(d).f+std::get<1>(d).f)/2.;
	const float_t D=std::get<2>(d);
	con.c[29]= 2*D - con.c[23]*f + f*(-D - (-Q1 + 1.0)*(-Q2 + 1.0) + 1) + 2*(-Q1 + 1.0)*(-Q2 + 1.0) ;
}

inline void set_c28 (Constants<float, std::tuple<const Population &, const Population &, const float_t &> > &con, const std::tuple<const Population &, const Population &, const float_t &> &d) {
	const float_t Q1=std::get<0>(d).m;
	const float_t Q2=std::get<1>(d).m;
	const float_t f=(std::get<0>(d).f+std::get<1>(d).f)/2.;
	const float_t D=std::get<2>(d);
	con.c[28]= -2*f + 2 ;
}

inline void set_c24 (Constants<float, std::tuple<const Population &, const Population &, const float_t &> > &con, const std::tuple<const Population &, const Population &, const float_t &> &d) {
	const float_t Q1=std::get<0>(d).m;
	const float_t Q2=std::get<1>(d).m;
	const float_t f=(std::get<0>(d).f+std::get<1>(d).f)/2.;
	const float_t D=std::get<2>(d);
	con.c[24]= -2*D + 2*Q2*(-Q1 + 1.0) ;
}

inline void set_c22 (Constants<float, std::tuple<const Population &, const Population &, const float_t &> > &con, const std::tuple<const Population &, const Population &, const float_t &> &d) {
	const float_t Q1=std::get<0>(d).m;
	const float_t Q2=std::get<1>(d).m;
	const float_t f=(std::get<0>(d).f+std::get<1>(d).f)/2.;
	const float_t D=std::get<2>(d);
	con.c[22]= con.c[26]*con.c[6] + con.c[27]*(-D + Q2*(-Q1 + 1.0)) ;
}

inline void set_c21 (Constants<float, std::tuple<const Population &, const Population &, const float_t &> > &con, const std::tuple<const Population &, const Population &, const float_t &> &d) {
	const float_t Q1=std::get<0>(d).m;
	const float_t Q2=std::get<1>(d).m;
	const float_t f=(std::get<0>(d).f+std::get<1>(d).f)/2.;
	const float_t D=std::get<2>(d);
	con.c[21]= -f + 1 ;
}

inline void set_c20 (Constants<float, std::tuple<const Population &, const Population &, const float_t &> > &con, const std::tuple<const Population &, const Population &, const float_t &> &d) {
	const float_t Q1=std::get<0>(d).m;
	const float_t Q2=std::get<1>(d).m;
	const float_t f=(std::get<0>(d).f+std::get<1>(d).f)/2.;
	const float_t D=std::get<2>(d);
	con.c[20]= pow(con.c[6], 2) + con.c[6]*f*(-D - Q1*Q2 + 1) ;
}

inline void set_c19 (Constants<float, std::tuple<const Population &, const Population &, const float_t &> > &con, const std::tuple<const Population &, const Population &, const float_t &> &d) {
	const float_t Q1=std::get<0>(d).m;
	const float_t Q2=std::get<1>(d).m;
	const float_t f=(std::get<0>(d).f+std::get<1>(d).f)/2.;
	const float_t D=std::get<2>(d);
	con.c[19]= pow(con.c[25], 2) + con.c[25]*f*(D - Q1*(-Q2 + 1.0) + 1) ;
}

inline void set_c18 (Constants<float, std::tuple<const Population &, const Population &, const float_t &> > &con, const std::tuple<const Population &, const Population &, const float_t &> &d) {
	const float_t Q1=std::get<0>(d).m;
	const float_t Q2=std::get<1>(d).m;
	const float_t f=(std::get<0>(d).f+std::get<1>(d).f)/2.;
	const float_t D=std::get<2>(d);
	con.c[18]= f*(-D + Q2*(-Q1 + 1.0))*(D - Q2*(-Q1 + 1.0) + 1) + pow(-D + Q2*(-Q1 + 1.0), 2) ;
}

inline void set_c17 (Constants<float, std::tuple<const Population &, const Population &, const float_t &> > &con, const std::tuple<const Population &, const Population &, const float_t &> &d) {
	const float_t Q1=std::get<0>(d).m;
	const float_t Q2=std::get<1>(d).m;
	const float_t f=(std::get<0>(d).f+std::get<1>(d).f)/2.;
	const float_t D=std::get<2>(d);
	con.c[17]= pow(con.c[23], 2) + con.c[23]*f*(-D - (-Q1 + 1.0)*(-Q2 + 1.0) + 1) ;
}

inline void set_c16 (Constants<float, std::tuple<const Population &, const Population &, const float_t &> > &con, const std::tuple<const Population &, const Population &, const float_t &> &d) {
	const float_t Q1=std::get<0>(d).m;
	const float_t Q2=std::get<1>(d).m;
	const float_t f=(std::get<0>(d).f+std::get<1>(d).f)/2.;
	const float_t D=std::get<2>(d);
	con.c[16]= 4*D + Q1*Q2 + Q1*(Q2 - 1.0) + Q2*(Q1 - 1.0) + (Q1 - 1.0)*(Q2 - 1.0) ;
}

inline void set_c15 (Constants<float, std::tuple<const Population &, const Population &, const float_t &> > &con, const std::tuple<const Population &, const Population &, const float_t &> &d) {
	const float_t Q1=std::get<0>(d).m;
	const float_t Q2=std::get<1>(d).m;
	const float_t f=(std::get<0>(d).f+std::get<1>(d).f)/2.;
	const float_t D=std::get<2>(d);
	con.c[15]= 2*D + 2*Q1*Q2 - con.c[6]*f - f*(D + Q1*Q2 - 1) ;
}

inline void set_c14 (Constants<float, std::tuple<const Population &, const Population &, const float_t &> > &con, const std::tuple<const Population &, const Population &, const float_t &> &d) {
	const float_t Q1=std::get<0>(d).m;
	const float_t Q2=std::get<1>(d).m;
	const float_t f=(std::get<0>(d).f+std::get<1>(d).f)/2.;
	const float_t D=std::get<2>(d);
	con.c[14]= 2*D + 2*Q1*(Q2 - 1.0) - con.c[11]*f - f*(D + Q1*(Q2 - 1.0) + 1) ;
}

inline void set_c13 (Constants<float, std::tuple<const Population &, const Population &, const float_t &> > &con, const std::tuple<const Population &, const Population &, const float_t &> &d) {
	const float_t Q1=std::get<0>(d).m;
	const float_t Q2=std::get<1>(d).m;
	const float_t f=(std::get<0>(d).f+std::get<1>(d).f)/2.;
	const float_t D=std::get<2>(d);
	con.c[13]= 2*D + 2*Q2*(Q1 - 1.0) - con.c[10]*f - f*(D + Q2*(Q1 - 1.0) + 1) ;
}

inline void set_c12 (Constants<float, std::tuple<const Population &, const Population &, const float_t &> > &con, const std::tuple<const Population &, const Population &, const float_t &> &d) {
	const float_t Q1=std::get<0>(d).m;
	const float_t Q2=std::get<1>(d).m;
	const float_t f=(std::get<0>(d).f+std::get<1>(d).f)/2.;
	const float_t D=std::get<2>(d);
	con.c[12]= 2*D - con.c[0]*f - f*(D + (Q1 - 1.0)*(Q2 - 1.0) - 1) + 2*(Q1 - 1.0)*(Q2 - 1.0) ;
}

inline void set_c9 (Constants<float, std::tuple<const Population &, const Population &, const float_t &> > &con, const std::tuple<const Population &, const Population &, const float_t &> &d) {
	const float_t Q1=std::get<0>(d).m;
	const float_t Q2=std::get<1>(d).m;
	const float_t f=(std::get<0>(d).f+std::get<1>(d).f)/2.;
	const float_t D=std::get<2>(d);
	con.c[9]= con.c[0]*con.c[6] + con.c[10]*con.c[11] ;
}

inline void set_c8 (Constants<float, std::tuple<const Population &, const Population &, const float_t &> > &con, const std::tuple<const Population &, const Population &, const float_t &> &d) {
	const float_t Q1=std::get<0>(d).m;
	const float_t Q2=std::get<1>(d).m;
	const float_t f=(std::get<0>(d).f+std::get<1>(d).f)/2.;
	const float_t D=std::get<2>(d);
	con.c[8]= f - 1 ;
}

inline void set_c7 (Constants<float, std::tuple<const Population &, const Population &, const float_t &> > &con, const std::tuple<const Population &, const Population &, const float_t &> &d) {
	const float_t Q1=std::get<0>(d).m;
	const float_t Q2=std::get<1>(d).m;
	const float_t f=(std::get<0>(d).f+std::get<1>(d).f)/2.;
	const float_t D=std::get<2>(d);
	con.c[7]= -D - Q1*Q2 + f*(D + Q1*Q2 - 1) ;
}

inline void set_c5 (Constants<float, std::tuple<const Population &, const Population &, const float_t &> > &con, const std::tuple<const Population &, const Population &, const float_t &> &d) {
	const float_t Q1=std::get<0>(d).m;
	const float_t Q2=std::get<1>(d).m;
	const float_t f=(std::get<0>(d).f+std::get<1>(d).f)/2.;
	const float_t D=std::get<2>(d);
	con.c[5]= -D + Q1*(-Q2 + 1.0) + f*(D + Q1*(Q2 - 1.0) + 1) ;
}

inline void set_c4 (Constants<float, std::tuple<const Population &, const Population &, const float_t &> > &con, const std::tuple<const Population &, const Population &, const float_t &> &d) {
	const float_t Q1=std::get<0>(d).m;
	const float_t Q2=std::get<1>(d).m;
	const float_t f=(std::get<0>(d).f+std::get<1>(d).f)/2.;
	const float_t D=std::get<2>(d);
	con.c[4]= D - Q1*(-Q2 + 1.0) ;
}

inline void set_c3 (Constants<float, std::tuple<const Population &, const Population &, const float_t &> > &con, const std::tuple<const Population &, const Population &, const float_t &> &d) {
	const float_t Q1=std::get<0>(d).m;
	const float_t Q2=std::get<1>(d).m;
	const float_t f=(std::get<0>(d).f+std::get<1>(d).f)/2.;
	const float_t D=std::get<2>(d);
	con.c[3]= -D + Q2*(-Q1 + 1.0) + f*(D + Q2*(Q1 - 1.0) + 1) ;
}

inline void set_c2 (Constants<float, std::tuple<const Population &, const Population &, const float_t &> > &con, const std::tuple<const Population &, const Population &, const float_t &> &d) {
	const float_t Q1=std::get<0>(d).m;
	const float_t Q2=std::get<1>(d).m;
	const float_t f=(std::get<0>(d).f+std::get<1>(d).f)/2.;
	const float_t D=std::get<2>(d);
	con.c[2]= D - Q2*(-Q1 + 1.0) ;
}

inline void set_c1 (Constants<float, std::tuple<const Population &, const Population &, const float_t &> > &con, const std::tuple<const Population &, const Population &, const float_t &> &d) {
	const float_t Q1=std::get<0>(d).m;
	const float_t Q2=std::get<1>(d).m;
	const float_t f=(std::get<0>(d).f+std::get<1>(d).f)/2.;
	const float_t D=std::get<2>(d);
	con.c[1]= -D + f*(D + (-Q1 + 1.0)*(-Q2 + 1.0) - 1) - (Q1 - 1.0)*(Q2 - 1.0) ;
}

static void (*cfn_ld[34])(Constants<float, std::tuple<const Population &, const Population &, const float_t &> > &, const std::tuple<const Population &, const Population &, const float_t &> &)={&set_c27 , &set_c26
, &set_c25
, &set_c23
, &set_c11
, &set_c10
, &set_c6
, &set_c0
, &set_c33
, &set_c32
, &set_c31
, &set_c30
, &set_c29
, &set_c28
, &set_c24
, &set_c22
, &set_c21
, &set_c20
, &set_c19
, &set_c18
, &set_c17
, &set_c16
, &set_c15
, &set_c14
, &set_c13
, &set_c12
, &set_c9
, &set_c8
, &set_c7
, &set_c5
, &set_c4
, &set_c3
, &set_c2
, &set_c1
};

#define LD_CNTS	34
#define LD_ARRAY	cfn_ld

#endif
